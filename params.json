{
  "name": "Turtlejs",
  "tagline": "TurtleJS app",
  "body": "# Commands\r\n## Environment functions\r\n### newTurtle(name)\r\n* **Description:** Creates a new turtle and associates a name with it. The new turtle will appear on the center of the drawing space.\r\n* **Important note 1:** The environment already provides a default turtle called \"t\".\r\n* **Important note 2:** The multi-turtle subsystem is still an experimental feature of TurtleJS.\r\n* **Example:** `newTurtle(\"greenTurtle\");`\r\n\r\n***\r\n\r\n##Space's functions\r\n### clear()\r\n* **Description:** Clears the whole space drawings, but does not change the turtles' positions and appearances.\r\n* **Example:** `clear();`\r\n\r\n### bkColor(red, green, blue)\r\n* **Description:** Changes the space's background color. The red, green and blue parameters are all of type Number. They range from 0 to 100, each one specifying the percentage for each color component.\r\n* **Example:** `bkColor(100, 0, 0); // Sets the background color to red.`\r\n\r\n### maxX()\r\n* **Description:** Returns the maximum horizontal (x) coordinate of the 2D space.\r\n* **Example:** `t.go(maxX(), maxY());`\r\n\r\n### maxY()\r\n* **Description:** Returns the maximum vertical (y) coordinate of the 2D space.\r\n* **Example:** `t.go(maxX(), maxY());`\r\n\r\n***\r\n\r\n## Turtle's positioning methods and properties\r\n###forward(distance) / fw(distance)\r\n* **Description:** Moves the turtle forward with the specified distance.\r\n* **Example:** `t.fw(100);`\r\n\r\n###back(distance) / bk(distance)\r\n* **Description:** Moves the turtle backwards with the specified distance.\r\n* **Example:** `t.bk(100);`\r\n\r\n###left(angle) / lt(angle)\r\n* **Description:** Rotates the turtle counterclockwise with the specified angle. This is rotation is a relative to the current turtle's heading.\r\n* **Example:** `t.lt(90); //Rotates 90 degrees.`\r\n\r\n###right(angle) / rt(angle)\r\n* **Description:** Rotates the turtle clockwise with the specified angle. This is rotation is a relative to the current turtle's heading.\r\n* **Example:** `t.rt(90); //Rotates 90 degrees.`\r\n\r\n###go(x, y)\r\n* **Description:** Absolute positioning. Moves the turtle to the specified coordinates.\r\n* **Note:** The upper left corner of the drawing space is (0, 0). The vertical (y) coordinates increases from top to bottom. \r\n* **Example:** `newTurtle(\"greenTurtle\");`\r\n\r\n###home()\r\n* **Description:** Moves the turtle to the center of the drawing space.\r\n* **Example:** `t.home();`\r\n\r\n###x [Number, read-only property]\r\n* **Description:** Returns the turtle's current horizontal (x) coordinate.\r\n* **Example:** `t.goto(t.x, 200); //Moves the turtle only on the vertical axis.`\r\n\r\n###y [Number, read-only property]\r\n* **Description:** Returns the turtle's current vertical (y) coordinate.\r\n* **Example:** `t.goto(200, t.y); //Moves the turtle only on the horizontal axis.`\r\n\r\n###heading [Number, property]\r\n* **Description:** Allows to set (and get) the absolute heading angle of the turtle.\r\n* **Example:** `t.heading = t.heading + 45; //Same as t.rt(45)`\r\n***\r\n\r\n##Turtle's appearance methods and properties\r\n###visible [Boolean, property]\r\n* **Description:** Sets/gets the visibility of the turtle itself, so it can be shown or hidden.\r\n* **Example:** `t.visible = !t.visible; //Toggles turtle's visibility.`\r\n\r\n###scale [Number, property]\r\n* **Description:** Allows to set (and get) the scale of the turtle's image. It's default value is 1.\r\n* **Example:** `t.scale = t.scale*3.5;`\r\n\r\n###image [String, property]\r\n* **Description:** Sets/gets the image of the turtle. Provided images are \"turtle\" (default), \"rocket\" and \"turtleSolid\".\r\n* **Example:** `t.image = \"rocket\";`\r\n\r\n###show()\r\n* **Description:** Convenience method equivalent to setting visible to true.\r\n* **Example:** `t.show();`\r\n\r\n###hide()\r\n* **Description:** Convenience method equivalent to setting visible to false.\r\n* **Example:** `t.hide();`\r\n\r\n***\r\n\r\n##Turtle's drawing methods and properties\r\n###clear() / cl()\r\n* **Description:** Clears all the turtle's drawings..\r\n* **Example:** `t.cl();`\r\n\r\n###penWidth / pw\r\n* **Description:** Sets/gets the pen's width.\r\n* **Example:** `t.pw = 5;`\r\n\r\n###pc(red, green, blue)\r\n* **Description:** Sets/gets the pen's color. The red, green and blue parameters are all of type Number. They range from 0 to 100, each one specifying the percentage for each color component.\r\n* **Example:** `t.pc(100, 50, 100);`\r\n\r\n###isPenDown: Bool {get}    \r\n* **Description:** Returns true if the turtle's pen is currently down.\r\n* **Example:** `t.visible = t.isPenDown;`\r\n\r\n###penUp() / pu()\r\n* **Description:** Sets the turtle's pen up.\r\n* **Example:** `t.pu();`\r\n\r\n###penDown() / pd()\r\n* **Description:** Sets the turtle's pen down.\r\n* **Example:** `t.pd();`\r\n\r\n***\r\n\r\n##Turtle's combined drawing and position methods\r\n###reset()\r\n* **Description:** This is a convenience method that calls clear() and home(), in that order: it clears all this turtle's drawings and sends the turtle to home (the center of the drawing space).\r\n* **Example:** `t.reset();`\r\n\r\n***\r\n\r\n# Authors and Contributors\r\nCreated in 2016 by @miniBloq",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}